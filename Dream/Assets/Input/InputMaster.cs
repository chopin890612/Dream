//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""8d51a7b9-4761-4b50-9efb-41005c2642e9"",
            ""actions"": [
                {
                    ""name"": ""Movment"",
                    ""type"": ""Value"",
                    ""id"": ""9edf78f9-49b4-4fea-91eb-f4eb2c6c7e79"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""4935f2dc-8164-45cc-b58d-f72b39f3d510"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpUp"",
                    ""type"": ""Button"",
                    ""id"": ""f5fa5308-c013-4192-87f0-78769a57cb80"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""1dc83f85-f85c-46bc-859b-4ea9949a3d45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""2382619d-5aa5-42d3-8418-9d73a9eea4a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard_ArrowKey"",
                    ""id"": ""c289ee48-f81a-4d6b-8870-b86e35af67e4"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""8b81c828-580e-4a7c-aa70-c80132306a95"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""725e7c46-8a73-4eee-b85f-47b10d7c3831"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""6a9d4a3a-8211-48c3-be9f-e6365f25c1be"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""c0f569d3-d28e-443a-86fd-76a523c7ce57"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d976f59c-a7a5-4b2b-a4c8-2f5acb46a6a9"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21e69b01-de49-4872-904a-92d3df0f2b11"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""105b5e7c-f6f3-4495-9324-9d406cd1bc93"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da08496c-eb41-4fdf-8bff-4cc066f73cae"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""862405e2-881e-48a0-95b7-2fe1a1246498"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7d8a921-5e44-4bf4-9ddb-0b5baf52eeaf"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd234f9e-524f-40e7-9435-bbd73648e15a"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d389ac1-1374-44cc-bc12-11feb3274754"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""JumpUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a12ceb1-3a0e-44e9-99f5-57305b50f3a8"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""JumpUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ShapeShifter"",
            ""id"": ""5b1e0b80-eb83-48a6-8f1f-c8ef30b8319c"",
            ""actions"": [
                {
                    ""name"": ""Movment"",
                    ""type"": ""Value"",
                    ""id"": ""8e3e3c59-4a79-4436-90e5-66aa846e43b7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""365601b1-e5d2-450c-8699-52b50a92a85e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeShape"",
                    ""type"": ""Button"",
                    ""id"": ""fad8d92e-3a91-4927-a5bf-4a0b69db7701"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Climb"",
                    ""type"": ""Value"",
                    ""id"": ""653c09a5-db27-49c8-ad47-3f39915cc15b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard_ArrowKey"",
                    ""id"": ""8293302d-7d50-4a2a-b6d1-d9635bf09e3d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7ddd2f86-c343-4d97-bfa4-0b262986ffca"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""cf9d2e7e-7b2b-472d-88b6-8fff37d0b4ca"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2c352d85-931e-4116-a64d-a423a68224df"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0aed2298-99b0-43f4-8f1f-3e811ee5dbc6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66521631-cb21-4dfe-b05c-2164823c3750"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2799cd2-5c0b-41ad-8a82-ed5652cd58e3"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChangeShape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54b89af4-8085-4782-a061-1019964b8318"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ChangeShape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up/Down"",
                    ""id"": ""fb22ba67-27a0-4219-b824-438b55c81251"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Climb"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b734b9e0-4d34-4d17-949b-0b48cfb58b02"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Climb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""92c0232b-dcfd-44ee-932a-60f621386c89"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Climb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b3ab55f5-574f-4dc2-b2fe-9a702f994238"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Climb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlantModule"",
            ""id"": ""6892423a-189f-4887-b7f2-9e8679096e80"",
            ""actions"": [
                {
                    ""name"": ""Movment"",
                    ""type"": ""Value"",
                    ""id"": ""f79ed556-bdc1-445f-bb77-d6ed4c70a8ce"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""dc6c8199-24c9-446b-9faa-ed4ff5185573"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancle"",
                    ""type"": ""Button"",
                    ""id"": ""49781cfb-da45-4ae2-9162-33331c398eb8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""f81a78f3-47f4-43ba-b5bb-d8aaf6325259"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4dff2708-d44f-47e4-8809-9990ade4b26a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0e1f688c-679a-4397-a75e-4dedba32e793"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0b8fbe00-6152-4436-9c47-205084896077"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4ddd4aba-f0a2-49e4-bd3f-e30d14257f3e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b73a7c0c-2116-4ca8-9304-acd09e8dcd9e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cb6be154-2633-4b72-b44b-c56c9fc0efbb"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6b7e37f9-3cd2-4c08-8548-a55856fdd842"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77ca7ef3-9b1c-4999-99c3-408f09d888e6"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2788198-845f-4ebd-b519-d04e8d9c8e78"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Cancle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cef484e3-d924-45e9-9f26-755d1e109dee"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Cancle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e45de884-e865-4b36-8742-c7f58ec8c535"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e96e517-de80-45c8-bd23-e94d38d40e34"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movment = m_Player.FindAction("Movment", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_JumpUp = m_Player.FindAction("JumpUp", throwIfNotFound: true);
        m_Player_Attack = m_Player.FindAction("Attack", throwIfNotFound: true);
        m_Player_Dash = m_Player.FindAction("Dash", throwIfNotFound: true);
        // ShapeShifter
        m_ShapeShifter = asset.FindActionMap("ShapeShifter", throwIfNotFound: true);
        m_ShapeShifter_Movment = m_ShapeShifter.FindAction("Movment", throwIfNotFound: true);
        m_ShapeShifter_Jump = m_ShapeShifter.FindAction("Jump", throwIfNotFound: true);
        m_ShapeShifter_ChangeShape = m_ShapeShifter.FindAction("ChangeShape", throwIfNotFound: true);
        m_ShapeShifter_Climb = m_ShapeShifter.FindAction("Climb", throwIfNotFound: true);
        // PlantModule
        m_PlantModule = asset.FindActionMap("PlantModule", throwIfNotFound: true);
        m_PlantModule_Movment = m_PlantModule.FindAction("Movment", throwIfNotFound: true);
        m_PlantModule_Confirm = m_PlantModule.FindAction("Confirm", throwIfNotFound: true);
        m_PlantModule_Cancle = m_PlantModule.FindAction("Cancle", throwIfNotFound: true);
        m_PlantModule_Rotate = m_PlantModule.FindAction("Rotate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Movment;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_JumpUp;
    private readonly InputAction m_Player_Attack;
    private readonly InputAction m_Player_Dash;
    public struct PlayerActions
    {
        private @InputMaster m_Wrapper;
        public PlayerActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movment => m_Wrapper.m_Player_Movment;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @JumpUp => m_Wrapper.m_Player_JumpUp;
        public InputAction @Attack => m_Wrapper.m_Player_Attack;
        public InputAction @Dash => m_Wrapper.m_Player_Dash;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Movment.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovment;
                @Movment.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovment;
                @Movment.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovment;
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @JumpUp.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJumpUp;
                @JumpUp.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJumpUp;
                @JumpUp.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJumpUp;
                @Attack.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Dash.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDash;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movment.started += instance.OnMovment;
                @Movment.performed += instance.OnMovment;
                @Movment.canceled += instance.OnMovment;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @JumpUp.started += instance.OnJumpUp;
                @JumpUp.performed += instance.OnJumpUp;
                @JumpUp.canceled += instance.OnJumpUp;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // ShapeShifter
    private readonly InputActionMap m_ShapeShifter;
    private IShapeShifterActions m_ShapeShifterActionsCallbackInterface;
    private readonly InputAction m_ShapeShifter_Movment;
    private readonly InputAction m_ShapeShifter_Jump;
    private readonly InputAction m_ShapeShifter_ChangeShape;
    private readonly InputAction m_ShapeShifter_Climb;
    public struct ShapeShifterActions
    {
        private @InputMaster m_Wrapper;
        public ShapeShifterActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movment => m_Wrapper.m_ShapeShifter_Movment;
        public InputAction @Jump => m_Wrapper.m_ShapeShifter_Jump;
        public InputAction @ChangeShape => m_Wrapper.m_ShapeShifter_ChangeShape;
        public InputAction @Climb => m_Wrapper.m_ShapeShifter_Climb;
        public InputActionMap Get() { return m_Wrapper.m_ShapeShifter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShapeShifterActions set) { return set.Get(); }
        public void SetCallbacks(IShapeShifterActions instance)
        {
            if (m_Wrapper.m_ShapeShifterActionsCallbackInterface != null)
            {
                @Movment.started -= m_Wrapper.m_ShapeShifterActionsCallbackInterface.OnMovment;
                @Movment.performed -= m_Wrapper.m_ShapeShifterActionsCallbackInterface.OnMovment;
                @Movment.canceled -= m_Wrapper.m_ShapeShifterActionsCallbackInterface.OnMovment;
                @Jump.started -= m_Wrapper.m_ShapeShifterActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_ShapeShifterActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_ShapeShifterActionsCallbackInterface.OnJump;
                @ChangeShape.started -= m_Wrapper.m_ShapeShifterActionsCallbackInterface.OnChangeShape;
                @ChangeShape.performed -= m_Wrapper.m_ShapeShifterActionsCallbackInterface.OnChangeShape;
                @ChangeShape.canceled -= m_Wrapper.m_ShapeShifterActionsCallbackInterface.OnChangeShape;
                @Climb.started -= m_Wrapper.m_ShapeShifterActionsCallbackInterface.OnClimb;
                @Climb.performed -= m_Wrapper.m_ShapeShifterActionsCallbackInterface.OnClimb;
                @Climb.canceled -= m_Wrapper.m_ShapeShifterActionsCallbackInterface.OnClimb;
            }
            m_Wrapper.m_ShapeShifterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movment.started += instance.OnMovment;
                @Movment.performed += instance.OnMovment;
                @Movment.canceled += instance.OnMovment;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @ChangeShape.started += instance.OnChangeShape;
                @ChangeShape.performed += instance.OnChangeShape;
                @ChangeShape.canceled += instance.OnChangeShape;
                @Climb.started += instance.OnClimb;
                @Climb.performed += instance.OnClimb;
                @Climb.canceled += instance.OnClimb;
            }
        }
    }
    public ShapeShifterActions @ShapeShifter => new ShapeShifterActions(this);

    // PlantModule
    private readonly InputActionMap m_PlantModule;
    private IPlantModuleActions m_PlantModuleActionsCallbackInterface;
    private readonly InputAction m_PlantModule_Movment;
    private readonly InputAction m_PlantModule_Confirm;
    private readonly InputAction m_PlantModule_Cancle;
    private readonly InputAction m_PlantModule_Rotate;
    public struct PlantModuleActions
    {
        private @InputMaster m_Wrapper;
        public PlantModuleActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movment => m_Wrapper.m_PlantModule_Movment;
        public InputAction @Confirm => m_Wrapper.m_PlantModule_Confirm;
        public InputAction @Cancle => m_Wrapper.m_PlantModule_Cancle;
        public InputAction @Rotate => m_Wrapper.m_PlantModule_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_PlantModule; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlantModuleActions set) { return set.Get(); }
        public void SetCallbacks(IPlantModuleActions instance)
        {
            if (m_Wrapper.m_PlantModuleActionsCallbackInterface != null)
            {
                @Movment.started -= m_Wrapper.m_PlantModuleActionsCallbackInterface.OnMovment;
                @Movment.performed -= m_Wrapper.m_PlantModuleActionsCallbackInterface.OnMovment;
                @Movment.canceled -= m_Wrapper.m_PlantModuleActionsCallbackInterface.OnMovment;
                @Confirm.started -= m_Wrapper.m_PlantModuleActionsCallbackInterface.OnConfirm;
                @Confirm.performed -= m_Wrapper.m_PlantModuleActionsCallbackInterface.OnConfirm;
                @Confirm.canceled -= m_Wrapper.m_PlantModuleActionsCallbackInterface.OnConfirm;
                @Cancle.started -= m_Wrapper.m_PlantModuleActionsCallbackInterface.OnCancle;
                @Cancle.performed -= m_Wrapper.m_PlantModuleActionsCallbackInterface.OnCancle;
                @Cancle.canceled -= m_Wrapper.m_PlantModuleActionsCallbackInterface.OnCancle;
                @Rotate.started -= m_Wrapper.m_PlantModuleActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_PlantModuleActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_PlantModuleActionsCallbackInterface.OnRotate;
            }
            m_Wrapper.m_PlantModuleActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movment.started += instance.OnMovment;
                @Movment.performed += instance.OnMovment;
                @Movment.canceled += instance.OnMovment;
                @Confirm.started += instance.OnConfirm;
                @Confirm.performed += instance.OnConfirm;
                @Confirm.canceled += instance.OnConfirm;
                @Cancle.started += instance.OnCancle;
                @Cancle.performed += instance.OnCancle;
                @Cancle.canceled += instance.OnCancle;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
            }
        }
    }
    public PlantModuleActions @PlantModule => new PlantModuleActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMovment(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnJumpUp(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface IShapeShifterActions
    {
        void OnMovment(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnChangeShape(InputAction.CallbackContext context);
        void OnClimb(InputAction.CallbackContext context);
    }
    public interface IPlantModuleActions
    {
        void OnMovment(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
        void OnCancle(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
    }
}
